// supabase/functions/send-expiration-notifs/index.ts
import { serve } from 'https://deno.land/std@0.168.0/http/server.ts'
import { createClient } from 'https://esm.sh/@supabase/supabase-js'
import webpush from 'https://esm.sh/web-push'

// Initialisation Supabase avec acc√®s s√©curis√©
const supabase = createClient(
  Deno.env.get('SUPABASE_URL')!,
  Deno.env.get('SUPABASE_SERVICE_ROLE_KEY')!
)

// Cl√©s VAPID
webpush.setVapidDetails(
  'mailto:contact@tonsite.fr',
  Deno.env.get('VITE_VALID_PUBLIC_KEY')!,
  Deno.env.get('VITE_VALID_PRIVATE_KEY')!
)

serve(async (req) => {
  // 1. On r√©cup√®re tous les aliments qui p√©riment dans les 2 prochains jours
  const { data: aliments, error: errorAliments } = await supabase
    .from('aliment')
    .select('nom, date_peremption')
    .lte('date_peremption', new Date(Date.now() + 2 * 86400000).toISOString()) // dans 2 jours

  if (errorAliments) {
    console.error('Erreur r√©cup√©ration aliments:', errorAliments)
    return new Response('Erreur r√©cup√©ration aliments', { status: 500 })
  }

  // 2. On r√©cup√®re tous les abonn√©s (sans auth)
  const { data: subs, error: errorSubs } = await supabase
    .from('push_subscriptions')
    .select('subscription')

  if (errorSubs) {
    console.error('Erreur r√©cup√©ration abonnements:', errorSubs)
    return new Response('Erreur r√©cup√©ration abonn√©s', { status: 500 })
  }

  // 3. Pr√©parer le message
  const msg = {
    title: 'ü•∂ Attention √† ton frigo !',
    body: aliments.length > 0
      ? `Tu as ${aliments.length} aliment(s) qui p√©riment bient√¥t`
      : `V√©rifie tes dates de p√©remption !`
  }

  // 4. Envoi √† tous les abonn√©s
  for (const s of subs) {
    try {
      await webpush.sendNotification(s.subscription, JSON.stringify(msg))
    } catch (e) {
      console.error('Erreur envoi notif √† un abonn√©:', e)
    }
  }

  return new Response(`Notifications envoy√©es √† ${subs.length} abonn√©(s) ‚úÖ`, { status: 200 })
})
